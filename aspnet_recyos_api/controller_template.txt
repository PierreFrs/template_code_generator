using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using RecyOs.ORM.DTO;
using RecyOs.ORM.Entities;
using RecyOs.ORM.Interfaces;
using RecyOs.ORM.Service;
using Swashbuckle.AspNetCore.Annotations;

namespace RecyOs.Controllers;

[Route("api/[controller]")]
public class [EntityName]Controller : BaseApiController
{
    private readonly I[EntityName]Service<[EntityName]Dto> _[EntityNameLower]Service;
    public [EntityName]Controller(I[EntityName]Service<[EntityName]Dto> [EntityNameLower]Service)
    {
        _[EntityNameLower]Service = [EntityNameLower]Service;
    }

    /// POST
    /// <summary>
    /// Creates an object of type [EntityName]
    /// </summary>
    /// <returns>[EntityName]</returns>
    [SwaggerResponse(200, "Creates an object of type [EntityName]", typeof([EntityName]Dto))]
    [SwaggerResponse(401, "Unauthorized")]
    [HttpPost]
    public async Task<IActionResult> Create([Properties])
    {
        var [EntityNameLower] = await _[EntityNameLower]Service.CreateAsync([PropertyNames]);
        if ([EntityNameLower] == null) return NotFound();
        return Ok([EntityNameLower]);
    }

    /// GET
    /// <summary>
    /// Gets a list of objects of type [EntityName]
    /// </summary>
    /// <returns>List of [EntityName]s</returns>
    [SwaggerResponse(200, "Gets a list of objects of type [EntityName]", typeof(List<[EntityName]Dto>))]
    [SwaggerResponse(401, "Unauthorized")]
    [HttpGet]
    public async Task<IActionResult> Get()
    {
        var [EntityNameLower]s = await _[EntityNameLower]Service.GetListAsync();
        return Ok([EntityNameLower]s);
    }

    /// GET by Id
    /// <summary>
    /// Gets an object of type [EntityName] from its Id
    /// </summary>
    /// <returns>[EntityName]</returns>
    [SwaggerResponse(200, "Gets an object of type [EntityName] by Id", typeof([EntityName]Dto))]
    [SwaggerResponse(401, "Unauthorized")]
    [SwaggerResponse(404, "Not Found")]
    [HttpGet]
    [Route("{id:int}")]
    public async Task<IActionResult> GetById(int id)
    {
        var [EntityNameLower] = await _[EntityNameLower]Service.GetByIdAsync(id);
        if ([EntityNameLower] == null) return NotFound();
        return Ok([EntityNameLower]);
    }

    /// PUT
    /// <summary>
    /// Updates an object of type [EntityName] from its Id
    /// </summary>
    /// <param name="id">[EntityName] Id<param>
    /// <returns>[EntityName]</returns>
    [SwaggerResponse(200, "Updates an object of type [EntityName]", typeof([EntityName]Dto))]
    [SwaggerResponse(401, "Unauthorized")]
    [SwaggerResponse(404, "Not Found")]
    [HttpPut]
    [Route("{id:int}")]
    public async Task<IActionResult> Update(int id, [Properties])
    {
        var [EntityNameLower] = await _[EntityNameLower]Service.UpdateAsync(id, [PropertyNames]);
        if ([EntityNameLower] == null) return NotFound();
        return Ok([EntityNameLower]);
    }

    /// DELETE
    /// <summary>
    /// Deletes an object of type [EntityName] from its Id
    /// </summary>
    /// <param name="id">[EntityName] Id<param>
    /// <returns>true</returns>
    [SwaggerResponse(200, "Deletes an object of type [EntityName]")]
    [SwaggerResponse(401, "Unauthorized")]
    [SwaggerResponse(404, "Not Found")]
    [HttpDelete]
    [Route("{id:int}")]
    public async Task<IActionResult> Delete(int id)
    {
        var success = await _[EntityNameLower]Service.DeleteAsync(id);
        if (!success) return NotFound();
        return Ok(success);
    }
}