sing AutoMapper;

using backend.ORM.Models.Domains;
using backend.Repositories.Interface;
using backend.Services.Interface;

using DefaultNamespace;

namespace backend.Services.Implementation;

public class [EntityName]Service<T[EntityName], T[EntityName]Dto> : I[EntityName]Service<T[EntityName]Dto>
    where T[EntityName] : [EntityName], new()
    where T[EntityName]Dto : [EntityName]Dto, new()
{
    private readonly I[EntityName]Repository<T[EntityName]> _[EntityNameLower]Repository;
    private readonly IMapper _mapper;

    public [EntityName]Service(I[EntityName]Repository<T[EntityName]> [EntityNameLower]Repository, IMapper mapper)
    {
        _[EntityNameLower]Repository = [EntityNameLower]Repository;
        _mapper = mapper;
    }

    public async Task<T[EntityName]Dto> CreateAsync([Properties])
    {
        var [EntityNameLower] = new T[EntityName]() {{ [EntityName]Label = label, CreationDate = DateTime.Now }};
        var created[EntityName] = await _[EntityNameLower]Repository.CreateAsync([EntityNameLower]);
        var [EntityNameLower]Dto = _mapper.Map<T[EntityName]Dto>(created[EntityName]);
        return [EntityNameLower]Dto;
    }

    public async Task<List<T[EntityName]Dto>> GetListAsync()
    {
        var [EntityNameLower]s = await _[EntityNameLower]Repository.GetListAsync();
        return _mapper.Map<List<T[EntityName]Dto>>([EntityNameLower]s);
    }

    public async Task<T[EntityName]Dto> GetByIdAsync(int id)
    {
        var [EntityNameLower] = await _[EntityNameLower]Repository.GetByIdAsync(id);
        return _mapper.Map<T[EntityName]Dto>([EntityNameLower]);
    }

    public async Task<T[EntityName]Dto> UpdateAsync(int id, [Properties])
    {
        var existing[EntityName] = await _[EntityNameLower]Repository.GetByIdAsync(id);
        if (existing[EntityName] == null) return null;

        existing[EntityName].[EntityName]Label = label;
        existing[EntityName].UpdateDate = DateTime.Now;

        var updated[EntityName] = await _[EntityNameLower]Repository.UpdateAsync(existing[EntityName]);
        var updated[EntityName]Dto = _mapper.Map<T[EntityName]Dto>(updated[EntityName]);

        return updated[EntityName]Dto;
    }

    public async Task<bool> DeleteAsync(int id)
    {
        var existing[EntityName] = await _[EntityNameLower]Repository.GetByIdAsync(id);
        if (existing[EntityName] == null) return false;

        await _[EntityNameLower]Repository.DeleteAsync(id);
        return true;
    }
}